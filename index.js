const express = require("express");
const bodyParser = require("body-parser");
const TelegramBot = require("node-telegram-bot-api");

const BOT_TOKEN = '7882038455:AAGjDAlwlQP2FO2WklvL7WxfjQcht34N7gE';
const bot = new TelegramBot(BOT_TOKEN);

const app = express();
app.use(bodyParser.json());

const PORT = 3000;
bot.setWebHook(`https://bizimillyat-bot.onrender.com/${BOT_TOKEN}`);

app.post(`/${BOT_TOKEN}`, (req, res) => {
    const update = req.body;
    bot.processUpdate(update);
    res.sendStatus(200);
});

function getRandomPhrase(phrases) {
    const randomIndex = Math.floor(Math.random() * phrases.length);
    return phrases[randomIndex];
}

const greetings = [
    "–°–∞–ª–∞–º, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç! –°–ª—ã—à–∞–ª, —Ç—É—Ç —Ä–∞–∑–¥–∞—é—Ç –ø–µ—á–µ–Ω—å–∫–∏! üç™",
    "–°–∞–ª–∞–º, {name}! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ì–æ–≤–æ—Ä—è—Ç, —Ç—ã —Å—É–ø–µ—Ä–≥–µ—Ä–æ–π! ü¶∏‚Äç‚ôÇÔ∏è",
    "–°–∞–ª–∞–º, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ì–æ—Ç–æ–≤—å—Å—è, —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –≤–µ—Å–µ–ª–æ! üéâ",
    "–°–∞–ª–∞–º, {name}! –ù–µ —Å—Ç–æ–π –≤ —Å—Ç–æ—Ä–æ–Ω–µ! –£ –Ω–∞—Å —Ç—É—Ç —Ç–∞–Ω—Ü—ã –∏ –∫–æ–Ω–∫—É—Ä—Å –Ω–∞ –ª—É—á—à–µ–µ —Å–µ–ª—Ñ–∏! üì∏",
    "–°–∞–ª–∞–º, {name}! –ö–∞–∫ –¥–µ–ª–∞? –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ó–∞—Ö–æ–¥–∏, —É –Ω–∞—Å —Ç—É—Ç –≤–µ—Å–µ–ª—å–µ! üòÑ"
];

const activeCheck = [
    "{name}, —Ç—ã –∑–¥–µ—Å—å? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å! –ù–µ –ø—Ä—è—á—å—Å—è, –º—ã –Ω–µ –∫—É—Å–∞–µ–º—Å—è! üòú",
    "{name}, –≥–¥–µ —Ç—ã? –û—Ç–≤–µ—Ç—å! –£ –Ω–∞—Å —Ç—É—Ç –≤–µ—Å–µ–ª—å–µ, –Ω–µ —É–ø—É—Å—Ç–∏ –µ–≥–æ! üéä",
    "–≠–π, {name}, —Ç—ã —Å –Ω–∞–º–∏? –ñ–¥–µ–º —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ù–∞–¥–µ—é—Å—å, —Ç—ã –Ω–µ –∑–∞—Å—Ç—Ä—è–ª –≤ –ø—Ä–æ–±–∫–µ! üö¶",
    "{name}, —Ç—ã –≤—Å–µ –µ—â–µ –∑–¥–µ—Å—å? –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å! –ò–ª–∏ —Ç—ã —É–∂–µ —Å—Ç–∞–ª –ø—Ä–∏–∑—Ä–∞–∫–æ–º? üëª",
    "–≠–π, {name}, –≥–¥–µ —Ç—ã? –ú—ã –Ω–∞—á–∞–ª–∏ –±–µ–∑ —Ç–µ–±—è! –ú–æ–∂–µ—Ç, —Ç—ã –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç–µ—Ä—è–ª—Å—è? üß≠"
];

const responseMessages = [
    "–°–∞–ª–∞–º! –£—Ä–∞, —Ç—ã –ø—Ä–∏—à—ë–ª! –ú—ã —Ç–µ–±—è –∂–¥–∞–ª–∏! üòÑ",
    "–°–∞–ª–∞–º, {name}! –Ø –¥—É–º–∞–ª, —Ç—ã –ø—Ä–∏–∑—Ä–∞–∫! üéâ",
    "–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å! –ú—ã —É–∂–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –ø–µ—á–µ–Ω—å–∫–∏! üç™",
    "–£—Ä–∞, —Ç—ã –ø—Ä–∏—à—ë–ª! –ê —á—Ç–æ, –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–∏–º –≤–µ—á–µ—Ä–∏–Ω–∫—É? üéä",
    "–¢—ã –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å, –∫–∞–∫ –º—ã –ø–æ —Ç–µ–±–µ —Å–∫—É—á–∞–ª–∏! üòÉ"
];

const farewellMessages = [
    "–°–∞–ª–∞–º, {name}! –¢—ã –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç! –ñ–∞–ª—å, –º—ã —Ç–µ–±—è –∂–¥–∞–ª–∏! üò¢",
    "–≠—Ö, {name}, –∂–∞–ª—å! –ú—ã —Ç–µ–±—è –∂–¥–∞–ª–∏, –∞ —Ç—ã —É—à—ë–ª! üëã",
    "–ü–æ–∫–∞, {name}! –¢—ã –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç, –∞ –º—ã —Ç–µ–±—è –∂–¥–∞–ª–∏! ü•∫",
    "{name}, —Ç—ã —É—à—ë–ª! –ü–æ–∫–∞! –ú—ã —Ç–µ–±—è –∂–¥–∞–ª–∏! üéà",
    "–ñ–∞–ª—å, {name}, —á—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ—Ç! –ü–æ–∫–∞, –Ω–∞–¥–µ–µ–º—Å—è, —É–≤–∏–¥–∏–º—Å—è —Å–Ω–æ–≤–∞! üíî"
];

function wait(sec) {
    return new Promise((resolve) => {
        setTimeout(resolve, sec * 1000);
    });
}

bot.on('new_chat_members', async (msg) => {
    const newMember = msg.new_chat_member;
    const chatId = msg.chat.id;

    await wait(5);

    const welcomeMessage = getRandomPhrase(greetings).replace("{name}", `@${newMember.username || newMember.first_name}`);
    const welcomeResponse = await bot.sendMessage(chatId, welcomeMessage);

    const timeoutMinutes = 10; 
    const timeoutMillis = timeoutMinutes * 60 * 1000; 

    setTimeout(async () => {
        const chatMember = await bot.getChatMember(chatId, newMember.id);
        if (chatMember.status === 'member') {
            const checkMessage = getRandomPhrase(activeCheck).replace("{name}", `@${newMember.username || newMember.first_name}`);
            await bot.sendMessage(chatId, checkMessage);
            setTimeout(async () => {
                const updatedChatMember = await bot.getChatMember(chatId, newMember.id);
                if (updatedChatMember.status === 'member') {
                    await bot.kickChatMember(chatId, newMember.id);
                    const kickMessage = `${newMember.first_name} –±—ã–ª –∫–∏–∫–Ω—É—Ç –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—Ç–≤–µ—Ç–∞! –ü–æ–∫–∞ üòî`;
                    await bot.sendMessage(chatId, kickMessage);
                }
            }, timeoutMillis); 

            const messageListener = (message) => {
                if (message.reply_to_message && message.reply_to_message.message_id === welcomeResponse.message_id) {
                    const followUpMessage = getRandomPhrase(responseMessages).replace("{name}", message.from.first_name);
                    bot.sendMessage(chatId, followUpMessage);
                    bot.removeListener('message', messageListener); 
                }
            };
            bot.on('message', messageListener);
        }
    }, timeoutMillis);
});

bot.on('left_chat_member', (msg) => {
    const leftMember = msg.left_chat_member;
    const chatId = msg.chat.id;

    const farewellMessage = getRandomPhrase(farewellMessages).replace("{name}", `@${leftMember.username || leftMember.first_name}`);
    bot.sendMessage(chatId, farewellMessage);
});

app.listen(PORT, () => {
    console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
